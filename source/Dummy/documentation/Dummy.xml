<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dummy</name>
    </assembly>
    <members>
        <member name="T:Dummy.IDummyIfc">
            <summary>
            This is an interface.
            </summary>
        </member>
        <member name="P:Dummy.IDummyIfc.DummyCls">
            <summary>
            This is a property in the interface.
            </summary>
        </member>
        <member name="T:Dummy.MyDictionary">
            <summary>
            MyDict
            </summary>
        </member>
        <member name="T:Dummy.DummyClass">
            <summary>
            Dummy class description. See <see cref="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>.
            
            Also try with <see cref="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">LastOrDefault Specific Method</see>
            </summary>
        </member>
        <member name="T:Dummy.DummyClass.DummyNested`1">
            <summary>
            dummy <c>test</c>
            linebreak
            <code>
            example
            yep
            </code>
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            pouet <see cref="P:System.StringComparer.CurrentCulture"/>
            </remarks>
        </member>
        <member name="E:Dummy.DummyClass.DummyNested`1.Action">
            <summary>
            dummy
            </summary>
        </member>
        <member name="P:Dummy.DummyClass.DummyCls">
            <summary>Gets or sets the dummy cls. <see cref="T:System.String"/> and <see cref="T:DummyRef1.MyClassInDummy"/>.</summary>
            <value>The dummy cls.</value>
        </member>
        <member name="F:Dummy.DummyClass.DummyField">
            <summary>
            dummy
            </summary>
        </member>
        <member name="P:Dummy.DummyClass.DummyProperty">
            <summary>
            dummy
            </summary>
        </member>
        <member name="P:Dummy.DummyClass.Item(System.Int32)">
            <summary>
            dummy
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Dummy.DummyClass.DummyAsync``1(``0)">
            <summary>
            dummy <see cref="P:Dummy.DummyClass.DummyProperty"/> and <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="T">dummy</typeparam>
            <param name="value">dummy</param>
            <returns>dummy</returns>
        </member>
        <member name="M:Dummy.DummyClass.#ctor">
            <summary>
            dummy
            </summary>
        </member>
        <member name="M:Dummy.DummyClass.Unsafe(System.Void*)">
            <summary>
            dummy
            </summary>
            <param name="p">dummy</param>
            <returns>dummy</returns>
        </member>
        <member name="M:Dummy.DummyClass.DummyMethod``1(``0)">
            <summary>
            dummy
            </summary>
            <param name="pouet">kikoo</param>
            <typeparam name="T2">lol</typeparam>
        </member>
        <member name="P:Dummy.DummyClass.DummyOption">
            <summary>
            dummy
            </summary>
        </member>
        <member name="M:Dummy.DummyClass.DummyTuple``1(``0)">
            <summary>
            dummy
            </summary>
            <typeparam name="T2">dummy</typeparam>
            <param name="pouet">dummy</param>
            <returns>dummy</returns>
        </member>
        <member name="M:Dummy.DummyClass.DummyExplicitTuple``1(``0)">
            <summary>
            dummy
            </summary>
            <typeparam name="T2">dummy</typeparam>
            <param name="pouet">dummy</param>
            <returns>dummy</returns>
        </member>
        <member name="M:Dummy.DummyClass.op_Addition(Dummy.DummyClass,System.Int32)">
            <summary>
            dummy
            </summary>
            <param name="a">dummy</param>
            <param name="b">dummy</param>
            <returns>dummy</returns>
        </member>
        <member name="M:Dummy.DummyClass.op_Implicit(Dummy.DummyClass)~System.Int32">
            <summary>
            dummy
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:Dummy.DummyClass.op_Explicit(Dummy.DummyClass)~System.Double">
            <summary>
            dummy
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:Dummy.DummyClass.op_Explicit(System.Int32)~Dummy.DummyClass">
            <summary>
            dummy
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:Dummy.DummyClass.op_Equality(Dummy.DummyClass,Dummy.DummyClass)">
            <summary>
            dummy
            </summary>
            <param name="a">dummy</param>
            <param name="b">dummy</param>
            <returns>dummy</returns>
        </member>
        <member name="M:Dummy.DummyClass.op_Inequality(Dummy.DummyClass,Dummy.DummyClass)">
            <summary>
            dummy
            </summary>
            <param name="a">dummy</param>
            <param name="b">dummy</param>
            <returns>dummy</returns>
        </member>
        <member name="M:Dummy.DummyClass.op_Subtraction(Dummy.DummyClass,Dummy.DummyClass)">
            <summary>
            dummy
            </summary>
            <param name="a">dummy</param>
            <param name="b">dummy</param>
            <returns>dummy</returns>
        </member>
        <member name="M:Dummy.DummyClass.op_Multiply(Dummy.DummyClass,Dummy.DummyClass)">
            <summary>
            dummy
            </summary>
            <param name="a">dummy</param>
            <param name="b">dummy</param>
            <returns>dummy</returns>
        </member>
        <member name="M:Dummy.DummyClass.op_Division(Dummy.DummyClass,Dummy.DummyClass)">
            <summary>
            dummy
            </summary>
            <param name="a">dummy</param>
            <param name="b">dummy</param>
            <returns>dummy</returns>
        </member>
        <member name="M:Dummy.DummyClass.op_BitwiseAnd(Dummy.DummyClass,Dummy.DummyClass)">
            <summary>
            dummy
            </summary>
            <param name="a">dummy</param>
            <param name="b">dummy</param>
            <returns>dummy</returns>
        </member>
        <member name="M:Dummy.DummyClass.op_BitwiseOr(Dummy.DummyClass,Dummy.DummyClass)">
            <summary>
            dummy
            </summary>
            <param name="a">dummy</param>
            <param name="b">dummy</param>
            <returns>dummy</returns>
        </member>
        <member name="M:Dummy.DummyClass.op_OnesComplement(Dummy.DummyClass)">
            <summary>
            dummy
            </summary>
            <param name="a">dummy</param>
            <returns>dummy</returns>
        </member>
        <member name="M:Dummy.DummyClass.op_ExclusiveOr(Dummy.DummyClass,Dummy.DummyClass)">
            <summary>
            dummy
            </summary>
            <param name="a">dummy</param>
            <param name="b">dummy</param>
            <returns>dummy</returns>
        </member>
        <member name="M:Dummy.DummyClass.op_Increment(Dummy.DummyClass)">
            <summary>
            dummy
            </summary>
            <param name="a">dummy</param>
            <returns>dummy</returns>
        </member>
        <member name="M:Dummy.DummyClass.op_Decrement(Dummy.DummyClass)">
            <summary>
            dummy
            </summary>
            <param name="a">dummy</param>
            <returns>dummy</returns>
        </member>
        <member name="M:Dummy.DummyClass.op_LessThan(Dummy.DummyClass,Dummy.DummyClass)">
            <summary>
            dummy
            </summary>
            <param name="a">dummy</param>
            <param name="b">dummy</param>
            <returns>dummy</returns>
        </member>
        <member name="M:Dummy.DummyClass.op_GreaterThan(Dummy.DummyClass,Dummy.DummyClass)">
            <summary>
            dummy
            </summary>
            <param name="a">dummy</param>
            <param name="b">dummy</param>
            <returns>dummy</returns>
        </member>
        <member name="M:Dummy.DummyClass.op_LessThanOrEqual(Dummy.DummyClass,Dummy.DummyClass)">
            <summary>
            dummy
            </summary>
            <param name="a">dummy</param>
            <param name="b">dummy</param>
            <returns>dummy</returns>
        </member>
        <member name="M:Dummy.DummyClass.op_GreaterThanOrEqual(Dummy.DummyClass,Dummy.DummyClass)">
            <summary>
            dummy
            </summary>
            <param name="a">dummy</param>
            <param name="b">dummy</param>
            <returns>dummy</returns>
        </member>
        <member name="M:Dummy.DummyClass.op_UnaryNegation(Dummy.DummyClass)">
            <summary>
            dummy
            </summary>
            <param name="a">dummy</param>
            <returns>dummy</returns>
        </member>
        <member name="M:Dummy.DummyClass.op_UnaryPlus(Dummy.DummyClass)">
            <summary>
            dummy
            </summary>
            <param name="a">dummy</param>
            <returns>dummy</returns>
        </member>
        <member name="M:Dummy.DummyClass.op_Modulus(Dummy.DummyClass,Dummy.DummyClass)">
            <summary>
            dummy
            </summary>
            <param name="a">dummy</param>
            <param name="b">dummy</param>
            <returns>dummy</returns>
        </member>
        <member name="M:Dummy.DummyClass.op_LeftShift(Dummy.DummyClass,System.Int32)">
            <summary>
            dummy
            </summary>
            <param name="a">dummy</param>
            <param name="i">dummy</param>
            <returns>dummy</returns>
        </member>
        <member name="M:Dummy.DummyClass.op_RightShift(Dummy.DummyClass,System.Int32)">
            <summary>
            dummy
            </summary>
            <param name="a">dummy</param>
            <param name="i">dummy</param>
            <returns>dummy</returns>
        </member>
        <member name="M:Dummy.DummyClass.Overloaded(System.String)">
             <summary>
             dummy
             </summary>
             <param name="s">dummy</param>
             <remarks>
            <para>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam eget luctus dui, nec blandit arcu. Cras ullamcorper suscipit ornare. Nullam euismod placerat arcu ac pharetra. Nulla blandit vestibulum mi vitae sollicitudin. Donec orci nibh, venenatis non velit sed, gravida malesuada dolor. Nam vestibulum ullamcorper dui in faucibus. Fusce rutrum varius tortor, vel laoreet dolor pulvinar sit amet. Phasellus a neque ultricies, egestas nunc eu, facilisis ante. Vestibulum viverra lacus id libero iaculis mattis. Cras ut odio metus.</para> 
            <para>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam eget luctus dui, nec blandit arcu. Cras ullamcorper suscipit ornare. Nullam euismod placerat arcu ac pharetra. Nulla blandit vestibulum mi vitae sollicitudin. Donec orci nibh, venenatis non velit sed, gravida malesuada dolor. Nam vestibulum ullamcorper dui in faucibus. Fusce rutrum varius tortor, vel laoreet dolor pulvinar sit amet. Phasellus a neque ultricies, egestas nunc eu, facilisis ante. Vestibulum viverra lacus id libero iaculis mattis. Cras ut odio metus.</para> 
            <para>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam eget luctus dui, nec blandit arcu. Cras ullamcorper suscipit ornare. Nullam euismod placerat arcu ac pharetra. Nulla blandit vestibulum mi vitae sollicitudin. Donec orci nibh, venenatis non velit sed, gravida malesuada dolor. Nam vestibulum ullamcorper dui in faucibus. Fusce rutrum varius tortor, vel laoreet dolor pulvinar sit amet. Phasellus a neque ultricies, egestas nunc eu, facilisis ante. Vestibulum viverra lacus id libero iaculis mattis. Cras ut odio metus.</para> 
            </remarks>
        </member>
        <member name="M:Dummy.DummyClass.Overloaded(System.Int32)">
             <summary>
             dummy
             </summary>
             <param name="s">dummy</param>
             <remarks>
            <para>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam eget luctus dui, nec blandit arcu. Cras ullamcorper suscipit ornare. Nullam euismod placerat arcu ac pharetra. Nulla blandit vestibulum mi vitae sollicitudin. Donec orci nibh, venenatis non velit sed, gravida malesuada dolor. Nam vestibulum ullamcorper dui in faucibus. Fusce rutrum varius tortor, vel laoreet dolor pulvinar sit amet. Phasellus a neque ultricies, egestas nunc eu, facilisis ante. Vestibulum viverra lacus id libero iaculis mattis. Cras ut odio metus.</para> 
            <para>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam eget luctus dui, nec blandit arcu. Cras ullamcorper suscipit ornare. Nullam euismod placerat arcu ac pharetra. Nulla blandit vestibulum mi vitae sollicitudin. Donec orci nibh, venenatis non velit sed, gravida malesuada dolor. Nam vestibulum ullamcorper dui in faucibus. Fusce rutrum varius tortor, vel laoreet dolor pulvinar sit amet. Phasellus a neque ultricies, egestas nunc eu, facilisis ante. Vestibulum viverra lacus id libero iaculis mattis. Cras ut odio metus.</para> 
            <para>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam eget luctus dui, nec blandit arcu. Cras ullamcorper suscipit ornare. Nullam euismod placerat arcu ac pharetra. Nulla blandit vestibulum mi vitae sollicitudin. Donec orci nibh, venenatis non velit sed, gravida malesuada dolor. Nam vestibulum ullamcorper dui in faucibus. Fusce rutrum varius tortor, vel laoreet dolor pulvinar sit amet. Phasellus a neque ultricies, egestas nunc eu, facilisis ante. Vestibulum viverra lacus id libero iaculis mattis. Cras ut odio metus.</para> 
            </remarks>
        </member>
        <member name="M:Dummy.DummyClass.Overloaded(System.Double,System.Int32)">
             <summary>
             dummy
             </summary>
             <param name="s">dummy</param>
             <remarks>
            <para>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam eget luctus dui, nec blandit arcu. Cras ullamcorper suscipit ornare. Nullam euismod placerat arcu ac pharetra. Nulla blandit vestibulum mi vitae sollicitudin. Donec orci nibh, venenatis non velit sed, gravida malesuada dolor. Nam vestibulum ullamcorper dui in faucibus. Fusce rutrum varius tortor, vel laoreet dolor pulvinar sit amet. Phasellus a neque ultricies, egestas nunc eu, facilisis ante. Vestibulum viverra lacus id libero iaculis mattis. Cras ut odio metus.</para> 
            <para>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam eget luctus dui, nec blandit arcu. Cras ullamcorper suscipit ornare. Nullam euismod placerat arcu ac pharetra. Nulla blandit vestibulum mi vitae sollicitudin. Donec orci nibh, venenatis non velit sed, gravida malesuada dolor. Nam vestibulum ullamcorper dui in faucibus. Fusce rutrum varius tortor, vel laoreet dolor pulvinar sit amet. Phasellus a neque ultricies, egestas nunc eu, facilisis ante. Vestibulum viverra lacus id libero iaculis mattis. Cras ut odio metus.</para> 
            <para>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam eget luctus dui, nec blandit arcu. Cras ullamcorper suscipit ornare. Nullam euismod placerat arcu ac pharetra. Nulla blandit vestibulum mi vitae sollicitudin. Donec orci nibh, venenatis non velit sed, gravida malesuada dolor. Nam vestibulum ullamcorper dui in faucibus. Fusce rutrum varius tortor, vel laoreet dolor pulvinar sit amet. Phasellus a neque ultricies, egestas nunc eu, facilisis ante. Vestibulum viverra lacus id libero iaculis mattis. Cras ut odio metus.</para> 
            </remarks>
        </member>
        <member name="T:Dummy.SubDummy.SomeNamespace.MyDelegate1">
            <summary>
            This is a delegate
            </summary>
            <param name="a">parameter a</param>
            <param name="b">parameter b</param>
        </member>
        <member name="T:Dummy.SubDummy.SomeNamespace.MySubEnum">
            <summary>
            This is my sub enum. Real nice.
            </summary>
            <remarks>
            Some remarks about this enum.
            </remarks>
        </member>
        <member name="F:Dummy.SubDummy.SomeNamespace.MySubEnum.One">
            <summary>
            The numeber one field
            </summary>
        </member>
        <member name="F:Dummy.SubDummy.SomeNamespace.MySubEnum.Twelve">
            <summary>
            The numeber twelve field
            </summary>
        </member>
        <member name="F:Dummy.SubDummy.SomeNamespace.MySubEnum.Fourteen">
            <summary>
            The number fourteen field.
            </summary>
        </member>
        <member name="T:Dummy.SubDummy.SomeNamespace.SubDummy`1">
            <summary>
            SumDummy is a class deriving from a nested class.
            </summary>
            <remarks>
            <para>This is the remarks for the <see cref="T:Dummy.SubDummy.SomeNamespace.SubDummy`1"/> class.</para>
            <para>It contains some paragraphs, with a small <c>code</c> tag.</para>
            <para>And finally one last paragraph, with a <see cref="T:System.Collections.Generic.IEnumerable`1"/> (see) and also a <see langword="false"/>.</para>
            <para>And the type parameter <typeparamref name="T"/> is also here.</para>
            </remarks>
            <seealso cref="M:Dummy.SubDummy.SomeNamespace.SubDummy`1.#ctor(System.Tuple{System.Int32,System.String})"/>
        </member>
        <member name="T:Dummy.SubDummy.SomeNamespace.SubDummy`1.MyDelegate1">
            <summary>
            This is a delegate
            </summary>
            <param name="a">parameter a</param>
            <param name="b">parameter b</param>
            <remarks>
            <para>This is the remarks, with a bullet list:
            <list type="bullet">
            <item>
              <description>This is item 1</description>
            </item>
            <item>
              <description>This is item 2</description>
            </item>
            <item>
              <description>This is item 3</description>
            </item>
            </list>
            </para>
            <para>
            And here we go witha  <c>Number</c> list:
            <list type="number">
            <item>
              <description>This is item 1</description>
            </item>
            <item>
              <description>This is item 2</description>
            </item>
            <item>
              <description>This is item 3</description>
            </item>
            </list>
            </para>
            
            <para>
            Here's a table:
            /// <list type="table">
            <listheader>
            <term>Action</term>
            <term>Description</term>
            <term>Power Consumption</term>
            </listheader>
            <item>
            <term>Forward</term>
            <term>Move forwards in a straight line.</term>
            <term>50W</term>
            </item>
            <item>
            <term>Backward</term>
            <term>Move backwards in a straight line.</term>
            <term>50W</term>
            </item>
            <item>
            <term>RotateLeft</term>
            <term>Rotate to the left.</term>
            <term>30W</term>
            </item>
            <item>
            <term>RotateRight</term>
            <term>Rotate to the right.</term>
            <term>30W</term>
            </item>
            <item>
            <term>Dig</term>
            <term>Tells the robot to dig and obtain a soil sample.</term>
            <term>800W</term>
            </item>
            </list>
            </para>      
            
            <para>
            A definition list:
            <list type="number">
            <item>
            <term>Forward</term>
            <description>Move forwards in a straight line.</description>
            </item>
            <item>
            <term>Backward</term>
            <description>Move backwards in a straight line.</description>
            </item>
            <item>
            <term>RotateLeft</term>
            <description>Rotate to the left.</description>
            </item>
            <item>
            <term>RotateRight</term>
            <description>Rotate to the right.</description>
            </item>
            <item>
            <term>Dig</term>
            <description>Tells the robot to dig and obtain a soil sample.</description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Dummy.SubDummy.SomeNamespace.SubDummy`1.#ctor">
            <summary>
            The default constructor.
            </summary>
            <remarks>
            We can have a type parameter <typeparamref name="T"/>.
            </remarks>
        </member>
        <member name="M:Dummy.SubDummy.SomeNamespace.SubDummy`1.#ctor(System.Tuple{System.Int32,System.String})">
            <summary>
            This is the normal tuple ctor.
            </summary>
            <param name="tupleProp"></param>
        </member>
        <member name="M:Dummy.SubDummy.SomeNamespace.SubDummy`1.#ctor(System.ValueTuple{System.Int32,System.String},System.Tuple{System.Int32,System.String})">
            <summary>
            This is a strange ctor.
            </summary>
            <param name="valueTupleProp">The value</param>
            <param name="tupleProp">Something</param>
            <remarks>
            We can have a type parameter <typeparamref name="T"/> and also a parameter <paramref name="tupleProp"/>.
            </remarks>
        </member>
        <member name="P:Dummy.SubDummy.SomeNamespace.SubDummy`1.ValueTupleProp">
            <summary>
            This returns a value tuple.
            </summary>
            <value>The tuple value of Apa and Bepa... a bit weird.</value>
        </member>
        <member name="P:Dummy.SubDummy.SomeNamespace.SubDummy`1.TupleProp">
            <summary>
            This returns a normal tuple.
            </summary>
        </member>
        <member name="M:Dummy.SubDummy.SomeNamespace.SubDummy`1.Method1(System.Int32)">
            <summary>
            This is a method with an example.
            </summary>
            <example>      
            This example illustrates accessing this method.
            <code>SubDummy&lt;int&gt; a = new SumDummy&lt;int&gt;();
            a.Method1(3);
            </code>
            </example>
            <remarks>
            <para>This is the remarks for the <see cref="T:Dummy.SubDummy.SomeNamespace.SubDummy`1"/> class.</para>
            <para>It contains some paragraphs, with a small <c>code</c> tag.</para>
            <para>And finally one last paragraph, with a <see cref="T:System.Collections.Generic.IEnumerable`1"/> (see) and also a <see langword="false"/>.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown when an argument is out of whack</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when an argument is out of whack</exception>
            <seealso cref="T:Dummy.DummyClass.DummyNested`1"/>
            <seealso cref="M:System.StringComparer.GetHashCode(System.String)"/>
            <param name="a">This is the value to pass in to the function. It is called <c>a</c>.</param>
            <returns>This method actually always returns <see langword="null"/>.</returns>
        </member>
        <member name="P:Dummy.SubDummy.SomeNamespace.SubDummy`1.Item(System.Int32)">
            <summary>
            some getter stuff
            </summary>
            <param name="i">the parameter i</param>
            <returns>a value of something</returns>
        </member>
        <member name="P:Dummy.SubDummy.SomeNamespace.SubDummy`1.Item(System.String)">
            <summary>
            some setter stuff.
            </summary>
            <param name="s">the s parameter</param>
            <value>The value of this property.</value>
        </member>
    </members>
</doc>
